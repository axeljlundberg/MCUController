
MCU_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000406  00800200  00800200  00000532  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000166d  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e8c  00000000  00000000  00001cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000870  00000000  00000000  00002b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  000033c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000746  00000000  00000000  000035fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e50  00000000  00000000  00003d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004b92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c1       	rjmp	.+938    	; 0x43c <__vector_36>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	26 e0       	ldi	r18, 0x06	; 6
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a6 30       	cpi	r26, 0x06	; 6
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d0       	rcall	.+4      	; 0x10a <main>
 106:	d9 c1       	rjmp	.+946    	; 0x4ba <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <main>:
#include <avr/io.h>
#include "UART1_IO.h"


int main(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	28 97       	sbiw	r28, 0x08	; 8
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
    initUART1();
 11e:	07 d0       	rcall	.+14     	; 0x12e <initUART1>
	unsigned char *type;
	unsigned char data[8];
	
    while (1) 
    {
		getMsgUART1(type,data);
 120:	be 01       	movw	r22, r28
 122:	6f 5f       	subi	r22, 0xFF	; 255
 124:	7f 4f       	sbci	r23, 0xFF	; 255
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	d2 d0       	rcall	.+420    	; 0x2d0 <getMsgUART1>
 12c:	f9 cf       	rjmp	.-14     	; 0x120 <main+0x16>

0000012e <initUART1>:
	checkBytes[1]=res;
}

uint8_t getBytesInBuffer(){
	return bytesInBuffer;
}
 12e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
 144:	e9 ec       	ldi	r30, 0xC9	; 201
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 61       	ori	r24, 0x18	; 24
 14c:	80 83       	st	Z, r24
 14e:	80 81       	ld	r24, Z
 150:	80 68       	ori	r24, 0x80	; 128
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <fixError>:
 156:	cf 93       	push	r28
 158:	dc 01       	movw	r26, r24
 15a:	4f 5f       	subi	r20, 0xFF	; 255
 15c:	5f 4f       	sbci	r21, 0xFF	; 255
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	61 50       	subi	r22, 0x01	; 1
 166:	71 09       	sbc	r23, r1
 168:	c1 e0       	ldi	r28, 0x01	; 1
 16a:	12 c0       	rjmp	.+36     	; 0x190 <fixError+0x3a>
 16c:	fd 01       	movw	r30, r26
 16e:	e4 0f       	add	r30, r20
 170:	f5 1f       	adc	r31, r21
 172:	90 81       	ld	r25, Z
 174:	95 35       	cpi	r25, 0x55	; 85
 176:	31 f4       	brne	.+12     	; 0x184 <fixError+0x2e>
 178:	fd 01       	movw	r30, r26
 17a:	e4 0f       	add	r30, r20
 17c:	f5 1f       	adc	r31, r21
 17e:	91 81       	ldd	r25, Z+1	; 0x01
 180:	9a 3a       	cpi	r25, 0xAA	; 170
 182:	29 f0       	breq	.+10     	; 0x18e <fixError+0x38>
 184:	4f 5f       	subi	r20, 0xFF	; 255
 186:	5f 4f       	sbci	r21, 0xFF	; 255
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	01 c0       	rjmp	.+2      	; 0x190 <fixError+0x3a>
 18e:	8c 2f       	mov	r24, r28
 190:	46 17       	cp	r20, r22
 192:	57 07       	cpc	r21, r23
 194:	14 f4       	brge	.+4      	; 0x19a <fixError+0x44>
 196:	88 23       	and	r24, r24
 198:	49 f3       	breq	.-46     	; 0x16c <fixError+0x16>
 19a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 19e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1a2:	82 0f       	add	r24, r18
 1a4:	93 1f       	adc	r25, r19
 1a6:	93 78       	andi	r25, 0x83	; 131
 1a8:	99 23       	and	r25, r25
 1aa:	1c f4       	brge	.+6      	; 0x1b2 <fixError+0x5c>
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	9c 6f       	ori	r25, 0xFC	; 252
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 1ba:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <bytesInBuffer>
 1be:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <bytesInBuffer+0x1>
 1c2:	82 1b       	sub	r24, r18
 1c4:	93 0b       	sbc	r25, r19
 1c6:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <bytesInBuffer+0x1>
 1ca:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <bytesInBuffer>
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <checkSum>:
 1d2:	dc 01       	movw	r26, r24
 1d4:	42 0f       	add	r20, r18
 1d6:	53 1f       	adc	r21, r19
 1d8:	64 17       	cp	r22, r20
 1da:	75 07       	cpc	r23, r21
 1dc:	e4 f0       	brlt	.+56     	; 0x216 <checkSum+0x44>
 1de:	ca 01       	movw	r24, r20
 1e0:	02 97       	sbiw	r24, 0x02	; 2
 1e2:	28 17       	cp	r18, r24
 1e4:	39 07       	cpc	r19, r25
 1e6:	6c f4       	brge	.+26     	; 0x202 <checkSum+0x30>
 1e8:	fd 01       	movw	r30, r26
 1ea:	e2 0f       	add	r30, r18
 1ec:	f3 1f       	adc	r31, r19
 1ee:	bc 01       	movw	r22, r24
 1f0:	6a 0f       	add	r22, r26
 1f2:	7b 1f       	adc	r23, r27
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	21 91       	ld	r18, Z+
 1f8:	92 27       	eor	r25, r18
 1fa:	e6 17       	cp	r30, r22
 1fc:	f7 07       	cpc	r31, r23
 1fe:	d9 f7       	brne	.-10     	; 0x1f6 <checkSum+0x24>
 200:	01 c0       	rjmp	.+2      	; 0x204 <checkSum+0x32>
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	4a 0f       	add	r20, r26
 206:	5b 1f       	adc	r21, r27
 208:	fa 01       	movw	r30, r20
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	80 81       	ld	r24, Z
 20e:	89 17       	cp	r24, r25
 210:	21 f0       	breq	.+8      	; 0x21a <checkSum+0x48>
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	08 95       	ret
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	08 95       	ret
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	08 95       	ret

0000021e <getDataFromBuffer>:
 21e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 222:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 226:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <rxWritePos>
 22a:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <rxWritePos+0x1>
 22e:	24 17       	cp	r18, r20
 230:	35 07       	cpc	r19, r21
 232:	e1 f0       	breq	.+56     	; 0x26c <getDataFromBuffer+0x4e>
 234:	e8 2f       	mov	r30, r24
 236:	f9 2f       	mov	r31, r25
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	d9 01       	movw	r26, r18
 240:	aa 5f       	subi	r26, 0xFA	; 250
 242:	bd 4f       	sbci	r27, 0xFD	; 253
 244:	4c 91       	ld	r20, X
 246:	41 93       	st	Z+, r20
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	3f 4f       	sbci	r19, 0xFF	; 255
 24c:	33 78       	andi	r19, 0x83	; 131
 24e:	33 23       	and	r19, r19
 250:	2c f4       	brge	.+10     	; 0x25c <getDataFromBuffer+0x3e>
 252:	21 50       	subi	r18, 0x01	; 1
 254:	31 09       	sbc	r19, r1
 256:	3c 6f       	ori	r19, 0xFC	; 252
 258:	2f 5f       	subi	r18, 0xFF	; 255
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
 25c:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <rxWritePos>
 260:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <rxWritePos+0x1>
 264:	42 17       	cp	r20, r18
 266:	53 07       	cpc	r21, r19
 268:	49 f7       	brne	.-46     	; 0x23c <getDataFromBuffer+0x1e>
 26a:	08 95       	ret
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	08 95       	ret

00000272 <findStartBytes>:
 272:	16 16       	cp	r1, r22
 274:	17 06       	cpc	r1, r23
 276:	94 f4       	brge	.+36     	; 0x29c <findStartBytes+0x2a>
 278:	e8 2f       	mov	r30, r24
 27a:	f9 2f       	mov	r31, r25
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	81 91       	ld	r24, Z+
 282:	85 35       	cpi	r24, 0x55	; 85
 284:	19 f4       	brne	.+6      	; 0x28c <findStartBytes+0x1a>
 286:	80 81       	ld	r24, Z
 288:	8a 3a       	cpi	r24, 0xAA	; 170
 28a:	59 f0       	breq	.+22     	; 0x2a2 <findStartBytes+0x30>
 28c:	2f 5f       	subi	r18, 0xFF	; 255
 28e:	3f 4f       	sbci	r19, 0xFF	; 255
 290:	62 17       	cp	r22, r18
 292:	73 07       	cpc	r23, r19
 294:	a9 f7       	brne	.-22     	; 0x280 <findStartBytes+0xe>
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	9f ef       	ldi	r25, 0xFF	; 255
 29a:	08 95       	ret
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	9f ef       	ldi	r25, 0xFF	; 255
 2a0:	08 95       	ret
 2a2:	82 2f       	mov	r24, r18
 2a4:	93 2f       	mov	r25, r19
 2a6:	08 95       	ret

000002a8 <getLengthOfMsg>:
 2a8:	9b 01       	movw	r18, r22
 2aa:	2d 5f       	subi	r18, 0xFD	; 253
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
 2ae:	24 17       	cp	r18, r20
 2b0:	35 07       	cpc	r19, r21
 2b2:	5c f4       	brge	.+22     	; 0x2ca <getLengthOfMsg+0x22>
 2b4:	fc 01       	movw	r30, r24
 2b6:	e6 0f       	add	r30, r22
 2b8:	f7 1f       	adc	r31, r23
 2ba:	92 81       	ldd	r25, Z+2	; 0x02
 2bc:	89 2f       	mov	r24, r25
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	98 2f       	mov	r25, r24
 2c2:	88 27       	eor	r24, r24
 2c4:	23 81       	ldd	r18, Z+3	; 0x03
 2c6:	82 2b       	or	r24, r18
 2c8:	08 95       	ret
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	9f ef       	ldi	r25, 0xFF	; 255
 2ce:	08 95       	ret

000002d0 <getMsgUART1>:
 2d0:	8f 92       	push	r8
 2d2:	9f 92       	push	r9
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	d4 50       	subi	r29, 0x04	; 4
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <bytesInBuffer>
 2fc:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <bytesInBuffer+0x1>
 300:	25 30       	cpi	r18, 0x05	; 5
 302:	31 05       	cpc	r19, r1
 304:	0c f4       	brge	.+2      	; 0x308 <getMsgUART1+0x38>
 306:	82 c0       	rjmp	.+260    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 308:	8b 01       	movw	r16, r22
 30a:	5c 01       	movw	r10, r24
 30c:	9e 01       	movw	r18, r28
 30e:	2f 5f       	subi	r18, 0xFF	; 255
 310:	3f 4f       	sbci	r19, 0xFF	; 255
 312:	79 01       	movw	r14, r18
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	94 e0       	ldi	r25, 0x04	; 4
 318:	f9 01       	movw	r30, r18
 31a:	9c 01       	movw	r18, r24
 31c:	11 92       	st	Z+, r1
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	30 40       	sbci	r19, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <getMsgUART1+0x4c>
 324:	c7 01       	movw	r24, r14
 326:	7b df       	rcall	.-266    	; 0x21e <getDataFromBuffer>
 328:	4c 01       	movw	r8, r24
 32a:	bc 01       	movw	r22, r24
 32c:	c7 01       	movw	r24, r14
 32e:	a1 df       	rcall	.-190    	; 0x272 <findStartBytes>
 330:	7c 01       	movw	r14, r24
 332:	8f 3f       	cpi	r24, 0xFF	; 255
 334:	3f ef       	ldi	r19, 0xFF	; 255
 336:	93 07       	cpc	r25, r19
 338:	09 f4       	brne	.+2      	; 0x33c <getMsgUART1+0x6c>
 33a:	6a c0       	rjmp	.+212    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 33c:	a4 01       	movw	r20, r8
 33e:	bc 01       	movw	r22, r24
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	b1 df       	rcall	.-158    	; 0x2a8 <getLengthOfMsg>
 346:	6c 01       	movw	r12, r24
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	c8 16       	cp	r12, r24
 34c:	d1 04       	cpc	r13, r1
 34e:	3c f0       	brlt	.+14     	; 0x35e <getMsgUART1+0x8e>
 350:	a7 01       	movw	r20, r14
 352:	b4 01       	movw	r22, r8
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	fe de       	rcall	.-516    	; 0x156 <fixError>
 35a:	85 e0       	ldi	r24, 0x05	; 5
 35c:	5c c0       	rjmp	.+184    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 35e:	97 01       	movw	r18, r14
 360:	a6 01       	movw	r20, r12
 362:	b4 01       	movw	r22, r8
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	34 df       	rcall	.-408    	; 0x1d2 <checkSum>
 36a:	86 30       	cpi	r24, 0x06	; 6
 36c:	39 f4       	brne	.+14     	; 0x37c <getMsgUART1+0xac>
 36e:	a7 01       	movw	r20, r14
 370:	b4 01       	movw	r22, r8
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	ef de       	rcall	.-546    	; 0x156 <fixError>
 378:	86 e0       	ldi	r24, 0x06	; 6
 37a:	4d c0       	rjmp	.+154    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	09 f4       	brne	.+2      	; 0x382 <getMsgUART1+0xb2>
 380:	49 c0       	rjmp	.+146    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 382:	fe 01       	movw	r30, r28
 384:	ee 0d       	add	r30, r14
 386:	ff 1d       	adc	r31, r15
 388:	85 81       	ldd	r24, Z+5	; 0x05
 38a:	f5 01       	movw	r30, r10
 38c:	80 83       	st	Z, r24
 38e:	65 e0       	ldi	r22, 0x05	; 5
 390:	6e 0d       	add	r22, r14
 392:	26 2f       	mov	r18, r22
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	a7 01       	movw	r20, r14
 398:	4c 0d       	add	r20, r12
 39a:	5d 1d       	adc	r21, r13
 39c:	42 50       	subi	r20, 0x02	; 2
 39e:	51 09       	sbc	r21, r1
 3a0:	24 17       	cp	r18, r20
 3a2:	35 07       	cpc	r19, r21
 3a4:	ac f4       	brge	.+42     	; 0x3d0 <getMsgUART1+0x100>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	98 0f       	add	r25, r24
 3ac:	f8 01       	movw	r30, r16
 3ae:	e8 0f       	add	r30, r24
 3b0:	f1 1d       	adc	r31, r1
 3b2:	a1 e0       	ldi	r26, 0x01	; 1
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	ac 0f       	add	r26, r28
 3b8:	bd 1f       	adc	r27, r29
 3ba:	a2 0f       	add	r26, r18
 3bc:	b3 1f       	adc	r27, r19
 3be:	8c 91       	ld	r24, X
 3c0:	80 83       	st	Z, r24
 3c2:	26 2f       	mov	r18, r22
 3c4:	29 0f       	add	r18, r25
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	89 2f       	mov	r24, r25
 3ca:	24 17       	cp	r18, r20
 3cc:	35 07       	cpc	r19, r21
 3ce:	64 f3       	brlt	.-40     	; 0x3a8 <getMsgUART1+0xd8>
 3d0:	ec 0c       	add	r14, r12
 3d2:	f1 2c       	mov	r15, r1
 3d4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 3d8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 3dc:	8e 0d       	add	r24, r14
 3de:	9f 1d       	adc	r25, r15
 3e0:	93 78       	andi	r25, 0x83	; 131
 3e2:	99 23       	and	r25, r25
 3e4:	1c f4       	brge	.+6      	; 0x3ec <getMsgUART1+0x11c>
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	9c 6f       	ori	r25, 0xFC	; 252
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 3f0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 3f4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <bytesInBuffer>
 3f8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <bytesInBuffer+0x1>
 3fc:	8e 19       	sub	r24, r14
 3fe:	9f 09       	sbc	r25, r15
 400:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <bytesInBuffer+0x1>
 404:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <bytesInBuffer>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	05 c0       	rjmp	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40c:	83 e0       	ldi	r24, 0x03	; 3
 40e:	03 c0       	rjmp	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 410:	84 e0       	ldi	r24, 0x04	; 4
 412:	01 c0       	rjmp	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	dc 5f       	subi	r29, 0xFC	; 252
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	ff 90       	pop	r15
 42c:	ef 90       	pop	r14
 42e:	df 90       	pop	r13
 430:	cf 90       	pop	r12
 432:	bf 90       	pop	r11
 434:	af 90       	pop	r10
 436:	9f 90       	pop	r9
 438:	8f 90       	pop	r8
 43a:	08 95       	ret

0000043c <__vector_36>:

/************************************************************************/
/* ISR                                                                     */
/************************************************************************/
ISR(USART1_RX_vect){
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	0b b6       	in	r0, 0x3b	; 59
 448:	0f 92       	push	r0
 44a:	2f 93       	push	r18
 44c:	3f 93       	push	r19
 44e:	8f 93       	push	r24
 450:	9f 93       	push	r25
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
	rxBuffer[rxWritePos++] = UDR1;
 456:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <rxWritePos>
 45a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <rxWritePos+0x1>
 45e:	9c 01       	movw	r18, r24
 460:	2f 5f       	subi	r18, 0xFF	; 255
 462:	3f 4f       	sbci	r19, 0xFF	; 255
 464:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <rxWritePos+0x1>
 468:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <rxWritePos>
 46c:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 470:	fc 01       	movw	r30, r24
 472:	ea 5f       	subi	r30, 0xFA	; 250
 474:	fd 4f       	sbci	r31, 0xFD	; 253
 476:	20 83       	st	Z, r18
	bytesInBuffer++;
 478:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <bytesInBuffer>
 47c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <bytesInBuffer+0x1>
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <bytesInBuffer+0x1>
 486:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <bytesInBuffer>
	if(rxWritePos >= RX_BUFFER_SIZE)
 48a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <rxWritePos>
 48e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <rxWritePos+0x1>
 492:	81 15       	cp	r24, r1
 494:	94 40       	sbci	r25, 0x04	; 4
 496:	24 f0       	brlt	.+8      	; 0x4a0 <__vector_36+0x64>
	{
		rxWritePos = 0;
 498:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <rxWritePos+0x1>
 49c:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <rxWritePos>
	}
}
 4a0:	ff 91       	pop	r31
 4a2:	ef 91       	pop	r30
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0b be       	out	0x3b, r0	; 59
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
